use iced::keyboard::key::{
  self,
  Code
};

#[derive(Default)]
pub struct Chorder {
  down_keys:Vec<key::Physical>,
  current:String
}

impl Chorder {
  pub fn key_down(&mut self,k:key::Physical) -> Option<&str>{
    if !self.down_keys.contains(&k) {
      push_key(&k,&mut self.current);
      self.down_keys.push(k);
      Some(&self.current[..])
    }
    else {
      None
    }
  }

  pub fn current(&self) -> &str {
    &self.current[..]
  }

  pub fn key_up(&mut self,k:key::Physical) {
    self.down_keys.retain(|dk| *dk != k);
    self.current.clear();

    for dk in &self.down_keys[..] {
      push_key(dk,&mut self.current)
    }
  }

  pub fn reset(&mut self) {
    self.current.clear();
    self.down_keys.clear();
  }
}

fn push_key(k:&key::Physical,strn:&mut String) {
  match k {
   key::Physical::Code(Code::Backquote) => strn.push('`'),
   key::Physical::Code(Code::Backslash) => strn.push('\\'),
   key::Physical::Code(Code::BracketLeft) => strn.push('['),
   key::Physical::Code(Code::BracketRight) => strn.push(']'),
   key::Physical::Code(Code::Comma) => strn.push(','),
   key::Physical::Code(Code::Digit0) => strn.push('0'),
   key::Physical::Code(Code::Digit1) => strn.push('1'),
   key::Physical::Code(Code::Digit2) => strn.push('2'),
   key::Physical::Code(Code::Digit3) => strn.push('3'),
   key::Physical::Code(Code::Digit4) => strn.push('4'),
   key::Physical::Code(Code::Digit5) => strn.push('5'),
   key::Physical::Code(Code::Digit6) => strn.push('6'),
   key::Physical::Code(Code::Digit7) => strn.push('7'),
   key::Physical::Code(Code::Digit8) => strn.push('8'),
   key::Physical::Code(Code::Digit9) => strn.push('9'),
   key::Physical::Code(Code::Equal) => strn.push('='),
   key::Physical::Code(Code::IntlBackslash) => strn.push('\\'),
   key::Physical::Code(Code::IntlRo) => strn.push('/'),
   key::Physical::Code(Code::IntlYen) => strn.push_str("<YEN>"),
   key::Physical::Code(Code::KeyA) => strn.push('a'),
   key::Physical::Code(Code::KeyB) => strn.push('b'),
   key::Physical::Code(Code::KeyC) => strn.push('c'),
   key::Physical::Code(Code::KeyD) => strn.push('d'),
   key::Physical::Code(Code::KeyE) => strn.push('e'),
   key::Physical::Code(Code::KeyF) => strn.push('f'),
   key::Physical::Code(Code::KeyG) => strn.push('g'),
   key::Physical::Code(Code::KeyH) => strn.push('h'),
   key::Physical::Code(Code::KeyI) => strn.push('i'),
   key::Physical::Code(Code::KeyJ) => strn.push('j'),
   key::Physical::Code(Code::KeyK) => strn.push('k'),
   key::Physical::Code(Code::KeyL) => strn.push('l'),
   key::Physical::Code(Code::KeyM) => strn.push('m'),
   key::Physical::Code(Code::KeyN) => strn.push('n'),
   key::Physical::Code(Code::KeyO) => strn.push('o'),
   key::Physical::Code(Code::KeyP) => strn.push('p'),
   key::Physical::Code(Code::KeyQ) => strn.push('q'),
   key::Physical::Code(Code::KeyR) => strn.push('r'),
   key::Physical::Code(Code::KeyS) => strn.push('s'),
   key::Physical::Code(Code::KeyT) => strn.push('t'),
   key::Physical::Code(Code::KeyU) => strn.push('u'),
   key::Physical::Code(Code::KeyV) => strn.push('v'),
   key::Physical::Code(Code::KeyW) => strn.push('w'),
   key::Physical::Code(Code::KeyX) => strn.push('x'),
   key::Physical::Code(Code::KeyY) => strn.push('y'),
   key::Physical::Code(Code::KeyZ) => strn.push('z'),
   key::Physical::Code(Code::Minus) => strn.push('-'),
   key::Physical::Code(Code::Period) => strn.push('.'),
   key::Physical::Code(Code::Quote) => strn.push('"'),
   key::Physical::Code(Code::Semicolon) => strn.push(';'),
   key::Physical::Code(Code::Slash) => strn.push('/'),
   key::Physical::Code(Code::AltLeft) => strn.push_str("<ALT>"),
   key::Physical::Code(Code::AltRight) => strn.push_str("<ALT>"),
   key::Physical::Code(Code::Backspace) => strn.push_str("<BKSP>"),
   key::Physical::Code(Code::CapsLock) => strn.push_str("<CAPS>"),
   key::Physical::Code(Code::ContextMenu) => strn.push_str("<MENU>"),
   key::Physical::Code(Code::ControlLeft) => strn.push_str("<CTRL>"),
   key::Physical::Code(Code::ControlRight) => strn.push_str("<CTRL>"),
   key::Physical::Code(Code::Enter) => strn.push_str("<ENTER>"),
   key::Physical::Code(Code::SuperLeft) => strn.push_str("<CMD>"),
   key::Physical::Code(Code::SuperRight) => strn.push_str("<CMD>"),
   key::Physical::Code(Code::ShiftLeft) => strn.push_str("<SHFT>"),
   key::Physical::Code(Code::ShiftRight) => strn.push_str("<SHFT>"),
   key::Physical::Code(Code::Space) => strn.push(' '),
   key::Physical::Code(Code::Tab) => strn.push_str("<TAB>"),
   key::Physical::Code(Code::Convert) => strn.push_str("<HNKN>"),
   key::Physical::Code(Code::KanaMode) => strn.push_str("<KNA>"),
   key::Physical::Code(Code::Lang1) => strn.push_str("<LNG1>"),
   key::Physical::Code(Code::Lang2) => strn.push_str("<LNG2>"),
   key::Physical::Code(Code::Lang3) => strn.push_str("<LNG3>"),
   key::Physical::Code(Code::Lang4) => strn.push_str("<LNG4>"),
   key::Physical::Code(Code::Lang5) => strn.push_str("<LNG5>"),
   key::Physical::Code(Code::NonConvert) => strn.push_str("<MUHN>"),
   key::Physical::Code(Code::Delete) => strn.push_str("<DEL>"),
   key::Physical::Code(Code::End) => strn.push_str("<END>"),
   key::Physical::Code(Code::Help) => strn.push_str("<HELP>"),
   key::Physical::Code(Code::Home) => strn.push_str("<HOME>"),
   key::Physical::Code(Code::Insert) => strn.push_str("<INS>"),
   key::Physical::Code(Code::PageDown) => strn.push_str("<PGDN>"),
   key::Physical::Code(Code::PageUp) => strn.push_str("<PGUP>"),
   key::Physical::Code(Code::ArrowDown) => strn.push_str("<DN>"),
   key::Physical::Code(Code::ArrowLeft) => strn.push_str("<LA>"),
   key::Physical::Code(Code::ArrowRight) => strn.push_str("<RA>"),
   key::Physical::Code(Code::ArrowUp) => strn.push_str("<UP>"),
   key::Physical::Code(Code::NumLock) => strn.push_str("<DN>"),
   key::Physical::Code(Code::Numpad0) => strn.push('0'),
   key::Physical::Code(Code::Numpad1) => strn.push('1'),
   key::Physical::Code(Code::Numpad2) => strn.push('2'),
   key::Physical::Code(Code::Numpad3) => strn.push('3'),
   key::Physical::Code(Code::Numpad4) => strn.push('4'),
   key::Physical::Code(Code::Numpad5) => strn.push('5'),
   key::Physical::Code(Code::Numpad6) => strn.push('6'),
   key::Physical::Code(Code::Numpad7) => strn.push('7'),
   key::Physical::Code(Code::Numpad8) => strn.push('8'),
   key::Physical::Code(Code::Numpad9) => strn.push('9'),
   key::Physical::Code(Code::NumpadAdd) => strn.push('+'),
   key::Physical::Code(Code::NumpadBackspace) => strn.push_str("<BKSP>"),
   key::Physical::Code(Code::NumpadClear) => strn.push_str("<CLR>"),
   key::Physical::Code(Code::NumpadClearEntry) => strn.push_str("<CLRENT>") ,
   key::Physical::Code(Code::NumpadComma) => strn.push(','),
   key::Physical::Code(Code::NumpadDecimal) => strn.push('.'),
   key::Physical::Code(Code::NumpadDivide) => strn.push('/'),
   key::Physical::Code(Code::NumpadEnter) => strn.push_str("<ENTER>"),
   key::Physical::Code(Code::NumpadEqual) => strn.push('='),
   key::Physical::Code(Code::NumpadHash) => strn.push('#'),
   key::Physical::Code(Code::NumpadMemoryAdd) => strn.push_str("<MEM_ADD>"),
   key::Physical::Code(Code::NumpadMemoryClear) => strn.push_str("<MEM_CLR>"),
   key::Physical::Code(Code::NumpadMemoryRecall) => strn.push_str("<MEM_RCL>"),
   key::Physical::Code(Code::NumpadMemoryStore) => strn.push_str("<MEM_STR>"),
   key::Physical::Code(Code::NumpadMemorySubtract) => strn.push_str("<MEM_SUB>"),
   key::Physical::Code(Code::NumpadMultiply) => strn.push('x'),
   key::Physical::Code(Code::NumpadParenLeft) => strn.push('('),
   key::Physical::Code(Code::NumpadParenRight) => strn.push(')'),
   key::Physical::Code(Code::NumpadStar) => strn.push('*'),
   key::Physical::Code(Code::NumpadSubtract) => strn.push('-'),
   key::Physical::Code(Code::Escape) => strn.push_str("<ESC>"),
   key::Physical::Code(Code::Fn) => strn.push_str("<FN>"),
   key::Physical::Code(Code::FnLock) => strn.push_str("<FNLK>"),
   key::Physical::Code(Code::PrintScreen) => strn.push_str("<PRNTSCR>"),
   key::Physical::Code(Code::ScrollLock) => strn.push_str("<SCRLLK>"),
   key::Physical::Code(Code::Pause) => strn.push_str("<PAUSE>"),
   key::Physical::Code(Code::BrowserBack) => strn.push_str("<BRWS_BK>"),
   key::Physical::Code(Code::BrowserFavorites) => strn.push_str("<BRWS_FAV>"),
   key::Physical::Code(Code::BrowserForward) => strn.push_str("<BRWS_FWD>"),
   key::Physical::Code(Code::BrowserHome) => strn.push_str("<BRWS_HOME>"),
   key::Physical::Code(Code::BrowserRefresh) => strn.push_str("<BRWS_RFRSH>"),
   key::Physical::Code(Code::BrowserSearch) => strn.push_str("<BRWS_SRCH>"),
   key::Physical::Code(Code::BrowserStop) => strn.push_str("<BRWS_STP>"),
   key::Physical::Code(Code::Eject) => strn.push_str("<EJECT>"),
   key::Physical::Code(Code::LaunchApp1) => strn.push_str("<LNCH1>"),
   key::Physical::Code(Code::LaunchApp2) => strn.push_str("<LNCH2>"),
   key::Physical::Code(Code::LaunchMail) => strn.push_str("<LNCHMAIL>"),
   key::Physical::Code(Code::MediaPlayPause) => strn.push_str("<MED_PLAY>"),
   key::Physical::Code(Code::MediaSelect) => strn.push_str("<MED_SEL>"),
   key::Physical::Code(Code::MediaStop) => strn.push_str("<MED_STOP>"),
   key::Physical::Code(Code::MediaTrackNext) => strn.push_str("<MED_NEXT>"),
   key::Physical::Code(Code::MediaTrackPrevious) => strn.push_str("<MED_PLAY>"),
   key::Physical::Code(Code::Power) => (),
   key::Physical::Code(Code::Sleep) => (),
   key::Physical::Code(Code::AudioVolumeDown) => (),
   key::Physical::Code(Code::AudioVolumeMute) => (),
   key::Physical::Code(Code::AudioVolumeUp) => (),
   key::Physical::Code(Code::WakeUp) => (),
   key::Physical::Code(Code::Meta) => strn.push_str("<META>"),
   key::Physical::Code(Code::Hyper) => strn.push_str("<HYPR>"),
   key::Physical::Code(Code::Turbo) => strn.push_str("<TURBO>"),
   key::Physical::Code(Code::Abort) => (),
   key::Physical::Code(Code::Resume) => (),
   key::Physical::Code(Code::Suspend) => (),
   key::Physical::Code(Code::Again) => strn.push_str("<AGAIN>"),
   key::Physical::Code(Code::Copy) => strn.push_str("<COPY>"),
   key::Physical::Code(Code::Cut) => strn.push_str("<CUT>"),
   key::Physical::Code(Code::Find) => strn.push_str("<FIND>"),
   key::Physical::Code(Code::Open) => strn.push_str("<OPEN>"),
   key::Physical::Code(Code::Paste) => strn.push_str("<PASTE>"),
   key::Physical::Code(Code::Props) => strn.push_str("<PROPS>"),
   key::Physical::Code(Code::Select) => strn.push_str("<SEL>"),
   key::Physical::Code(Code::Undo) => strn.push_str("<UNDO>"),
   key::Physical::Code(Code::Hiragana) => strn.push_str("<GANA>"),
   key::Physical::Code(Code::Katakana) => strn.push_str("<KATA>"),
   key::Physical::Code(Code::F1) => strn.push_str("<F1>"),
   key::Physical::Code(Code::F2) => strn.push_str("<F2>"),
   key::Physical::Code(Code::F3) => strn.push_str("<F3>"),
   key::Physical::Code(Code::F4) => strn.push_str("<F4>"),
   key::Physical::Code(Code::F5) => strn.push_str("<F5>"),
   key::Physical::Code(Code::F6) => strn.push_str("<F6>"),
   key::Physical::Code(Code::F7) => strn.push_str("<F7>"),
   key::Physical::Code(Code::F8) => strn.push_str("<F8>"),
   key::Physical::Code(Code::F9) => strn.push_str("<F9>"),
   key::Physical::Code(Code::F10) => strn.push_str("<F10>"),
   key::Physical::Code(Code::F11) => strn.push_str("<F11>"),
   key::Physical::Code(Code::F12) => strn.push_str("<F12>"),
   key::Physical::Code(Code::F13) => strn.push_str("<F13>"),
   key::Physical::Code(Code::F14) => strn.push_str("<F14>"),
   key::Physical::Code(Code::F15) => strn.push_str("<F15>"),
   key::Physical::Code(Code::F16) => strn.push_str("<F16>"),
   key::Physical::Code(Code::F17) => strn.push_str("<F17>"),
   key::Physical::Code(Code::F18) => strn.push_str("<F18>"),
   key::Physical::Code(Code::F19) => strn.push_str("<F19>"),
   key::Physical::Code(Code::F20) => strn.push_str("<F20>"),
   key::Physical::Code(Code::F21) => strn.push_str("<F21>"),
   key::Physical::Code(Code::F22) => strn.push_str("<F22>"),
   key::Physical::Code(Code::F23) => strn.push_str("<F23>"),
   key::Physical::Code(Code::F24) => strn.push_str("<F24>"),
   key::Physical::Code(Code::F25) => strn.push_str("<F25>"),
   key::Physical::Code(Code::F26) => strn.push_str("<F26>"),
   key::Physical::Code(Code::F27) => strn.push_str("<F27>"),
   key::Physical::Code(Code::F28) => strn.push_str("<F28>"),
   key::Physical::Code(Code::F29) => strn.push_str("<F29>"),
   key::Physical::Code(Code::F30) => strn.push_str("<F30>"),
   key::Physical::Code(Code::F31) => strn.push_str("<F31>"),
   key::Physical::Code(Code::F32) => strn.push_str("<F32>"),
   key::Physical::Code(Code::F33) => strn.push_str("<F33>"),
   key::Physical::Code(Code::F34) => strn.push_str("<F34>"),
   key::Physical::Code(Code::F35) => strn.push_str("<F35>"),
   _=>()
  }
}
